{
  "name": "twit",
  "description": "Twitter API client for node (REST & Streaming)",
  "version": "1.0.11",
  "author": {
    "name": "Tolga Tezel"
  },
  "keywords": [
    "twitter",
    "api",
    "rest",
    "stream",
    "streaming",
    "oauth"
  ],
  "dependencies": {},
  "devDependencies": {
    "mocha": ">=0.8.1",
    "colors": "0.6.x"
  },
  "engines": {
    "node": ">=0.6.0"
  },
  "main": "./lib/twitter",
  "repository": {
    "type": "git",
    "url": "http://github.com/ttezel/twit.git"
  },
  "scripts": {
    "test": "mocha tests/* -t 30000 -R spec"
  },
  "readme": "#twit\n\nTwitter API Client for node\n\nSupports both the **REST** and **Streaming** API.\n\n#Installing\n\n```\nnpm install twit\n\n```\n\n##Usage:\n\n```javascript\nvar Twit = require('twit')\n\nvar T = new Twit({\n    consumer_key:         '...'\n  , consumer_secret:      '...'\n  , access_token:         '...'\n  , access_token_secret:  '...'\n})\n\n//\n//  tweet 'hello world!'\n//\nT.post('statuses/update', { status: 'hello world!' }, function(err, reply) {\n  //  ...\n})\n      \n//\n//  search twitter for all tweets containing the word 'banana' since Nov. 11, 2011\n//\nT.get('search/tweets', { q: 'banana since:2011-11-11' }, function(err, reply) {\n  //  ...\n})\n\n//\n//  get the list of user id's that follow @tolga_tezel\n//\nT.get('followers/ids', { screen_name: 'tolga_tezel' },  function (err, reply) {\n  //  ...    \n})\n\n//\n//  stream a sample of public statuses\n//\nvar stream = T.stream('statuses/sample')\n\nstream.on('tweet', function (tweet) {\n  console.log(tweet)\n})\n      \n//\n//  filter the twitter public stream by the word 'mango'. \n//\nvar stream = T.stream('statuses/filter', { track: 'mango' })\n\nstream.on('tweet', function (tweet) {\n  console.log(tweet)\n})\n\n//\n// filter the public stream by the latitude/longitude bounded box of San Francisco\n//\nvar sanFrancisco = [ '-122.75', '36.8', '-121.75', '37.8' ]\n\nvar stream = T.stream('statuses/filter', { locations: sanFrancisco })\n\nstream.on('tweet', function (tweet) {\n  console.log(tweet)\n})\n\n```\n\n# twit API:\n\nJust 3 methods. They cover the full twitter API.\n\n##`T.get(path, [params], callback)`         \nGET any of the REST API Endpoints.\n\n##`T.post(path, [params], callback)`        \nPOST any of the REST API Endpoints.\n\n##`T.stream(path, [params])`               \nUse this with the Streaming API.\n\nNote: Omit the `.json` from `path` (i.e. use `'statuses/sample'` instead of `'statuses/sample.json'`).\n\n###params\n\nParams is an optional object, allowing you to pass in parameters to Twitter when making a request. Any Arrays passed into `params` get converted to comma-separated strings, allowing you to do requests like:\n\n```javascript\n//\n// I only want to see tweets about my favorite fruits\n//\n\n//same result as doing { track: 'bananas,oranges,strawberries' }\nvar stream = T.stream('statuses/filter', { track: ['bananas', 'oranges', 'strawberries'] })\n\nstream.on('tweet', function (tweet) {\n  //...\n})\n```\n\n# Using the Streaming API\n\n`T.stream(path, [params])` keeps the connection alive, and returns an `EventEmitter`.\n\n###path\n\n\n* If `path` is `'user'`, the User stream of the authenticated user will be streamed.\n* If `path` is `'site'`, the Site stream of the authenticated application will be streamed.\n* If `path` is anything other than `'user'` or `'site'`, the Public stream will be streamed.\n\nThe following events are emitted:\n\n##event: 'tweet'\n\nEmitted each time a status (tweet) comes into the stream.\n\n```javascript\nstream.on('tweet', function (tweet) {\n  //...\n})\n```\n\n##event: 'delete'\n\nEmitted each time a status (tweet) deletion message comes into the stream.\n\n```javascript\nstream.on('delete', function (deleteMessage) {\n  //...\n})\n```\n\n##event: 'limit'\n\nEmitted each time a limitation message comes into the stream.\n\n```javascript\nstream.on('limit', function (limitMessage) {\n  //...\n})\n```\n\n##event: 'scrub_geo'\n\nEmitted each time a location deletion message comes into the stream.\n\n```javascript\nstream.on('scrub_geo', function (scrubGeoMessage) {\n  //...\n})\n```\n\n##event: 'disconnect'\n\nEmitted when a disconnect message comes from Twitter. This occurs if you have multiple streams connected to Twitter's API. Upon receiving a disconnect message from Twitter, `Twit` will close the connection and emit this event with the message details received from twitter.\n\n```javascript\nstream.on('disconnect', function (disconnectMessage) {\n  //...\n})\n```\n\n\n\n##event: 'connect'\n\nEmitted when a connection attempt is made to Twitter. The http `request` object is emitted.\n\n```javascript\nstream.on('connect', function (request) {\n  //...\n})\n```\n\n##event: 'reconnect'\n\nEmitted when a reconnection attempt is made to Twitter. The http `request` and `response` objects are emitted, along with the time (in milliseconds) left before the reconnect occurs. `Twit` follows Twitter's guidelines on reconnecting to the Streaming API.\n\n```javascript\nstream.on('reconnect', function (request, response, connectInterval) {\n  //...\n})\n```\n\n##event: 'warning'\n\nThis message is appropriate for clients using high-bandwidth connections, like the firehose. If your connection is falling behind, Twitter will queue messages for you, until your queue fills up, at which point they will disconnect you.\n\n```javascript\nstream.on('warning', function (warning) {\n  //...\n})\n```\n\n##event: 'status_withheld'\n\nEmitted when Twitter sends back a `status_withheld` message in the stream. This means that a tweet was withheld in certain countries.\n\n```javascript\nstream.on('status_withheld', function (withheldMsg) {\n  //...\n})\n```\n\n##event: 'user_withheld'\n\nEmitted when Twitter sends back a `user_withheld` message in the stream. This means that a Twitter user was withheld in certain countries.\n\n```javascript\nstream.on('user_withheld', function (withheldMsg) {\n  //...\n})\n```\n\n##stream.stop()\n\nCall this function on the stream to stop streaming (closes the connection with Twitter).\n\n##stream.start()\n\nCall this function to restart the stream after you called `.stop()` on it.\nNote: there is no need to call `.start()` to begin streaming. `Twit.stream` calls `.start()` for you.\n\n-------\n\n#What do I have access to?\n\nAnything in the Twitter API:\n\n* REST API Endpoints:       https://dev.twitter.com/docs/api\n* Public stream endpoints:  https://dev.twitter.com/docs/streaming-api/methods\n* User stream endpoints:    https://dev.twitter.com/docs/streaming-api/user-streams\n* Site stream endpoints:    https://dev.twitter.com/docs/streaming-api/site-streams\n\n-------\n\nGo here to create an app and get OAuth credentials (if you haven't already): https://dev.twitter.com/apps/new\n\n\n#How do I run the tests?\n\nClone the repo\n\n```\ngit clone git@github.com:ttezel/twit.git\n```\n\nInstall [mocha](https://github.com/visionmedia/mocha)\n\n```\nnpm install mocha -g\n```\n\nNote: When the `-g` flag is invoked, the package will be installed globally. In order to use `mocha` from the command line, you must use the `-g` flag. This is necessary to run the tests with `npm test`.\n\nCreate a `config.js` file in the root of the cloned repo. It should export the oauth credentials. It should look something like this:\n\n```\nmodule.exports = {\n    consumer_key: '...'\n  , consumer_secret: '...'\n  , access_token: '...'\n  , access_token_secret: '...'\n}\n```\n\nThen run the tests:\n\n```\nnpm test\n```\n\nYou can also run the example:\n\n```\nnode examples/rtd2.js\n```\n\n![iRTD2](http://dl.dropbox.com/u/32773572/RTD2_logo.png)\n\nThe example is a twitter bot named [RTD2](https://twitter.com/#!/iRTD2) written using `twit`. RTD2 tweets about **github** and curates its social graph.\n\n-------\n\n## License \n\n(The MIT License)\n\nCopyright (c) by Tolga Tezel <tolgatezel11@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n## Changelog\n\n###1.0.0\n  * now to stop and start the stream, use `stream.stop()` and `stream.start()` instead of emitting the `start` and `stop` events\n  * If twitter sends a `disconnect` message, closes the stream and emits `disconnect` with the disconnect message received from twitter\n\n###0.2.0\n  * Updated `twit` for usage with v1.1 of the Twitter API.\n\n###0.1.5\n\n  * **BREAKING CHANGE** to `twit.stream()`. Does not take a callback anymore. It returns \n    immediately with the `EventEmitter` that you can listen on. The `Usage` section in \n    the Readme.md has been updated. Read it.\n\n\n###0.1.4\n\n  * `twit.stream()` has signature `function (path, params, callback)`",
  "readmeFilename": "README.md",
  "_id": "twit@1.0.11",
  "bundleDependencies": [
    "oauth"
  ],
  "dist": {
    "shasum": "40e43b1ed1d33de7853f12b6318ea3b7c838238d"
  },
  "_from": "twit"
}
